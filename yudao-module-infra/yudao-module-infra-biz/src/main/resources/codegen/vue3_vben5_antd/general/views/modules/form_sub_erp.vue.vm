#set ($subColumns = $subColumnsList.get($subIndex))##当前字段数组
#set ($subSimpleClassName = $subSimpleClassNames.get($subIndex))
#set ($subJoinColumn = $subJoinColumns.get($subIndex))##当前 join 字段
<template>
  <Dialog :title="dialogTitle" v-model="dialogVisible">
    <Form
      ref="formRef"
      :model="formData"
      :rules="formRules"
      label-col="{ span: 6 }"
      :loading="formLoading"
    >
#foreach($column in $subColumns)
    #if ($column.createOperation || $column.updateOperation)
        #set ($dictType = $column.dictType)
        #set ($javaField = $column.javaField)
        #set ($javaType = $column.javaType)
        #set ($AttrName = $column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        #set ($comment = $column.columnComment)
        #set ($dictMethod = "getDictOptions")## 计算使用哪个 dict 字典方法
        #if ($javaType == "Integer" || $javaType == "Long" || $javaType == "Byte" || $javaType == "Short")
            #set ($dictMethod = "getIntDictOptions")
        #elseif ($javaType == "String")
            #set ($dictMethod = "getStrDictOptions")
        #elseif ($javaType == "Boolean")
            #set ($dictMethod = "getBoolDictOptions")
        #end
        #if ( $column.id == $subJoinColumn.id) ## 特殊：忽略主子表的 join 字段，不用填写
        #elseif ($column.htmlType == "input" && !$column.primaryKey)## 忽略主键，不用在表单里
      <FormItem label="${comment}" name="${javaField}">
        <Input v-model:value="formData.${javaField}" placeholder="请输入${comment}" />
      </FormItem>
        #elseif($column.htmlType == "imageUpload")## 图片上传
      <FormItem label="${comment}" name="${javaField}">
        <UploadImg v-model:value="formData.${javaField}" />
      </FormItem>
        #elseif($column.htmlType == "fileUpload")## 文件上传
      <FormItem label="${comment}" name="${javaField}">
        <UploadFile v-model:value="formData.${javaField}" />
      </FormItem>
        #elseif($column.htmlType == "editor")## 文本编辑器
      <FormItem label="${comment}" name="${javaField}">
        <Editor v-model:value="formData.${javaField}" height="150px" />
      </FormItem>
        #elseif($column.htmlType == "select")## 下拉框
      <FormItem label="${comment}" name="${javaField}">
        <Select v-model:value="formData.${javaField}" placeholder="请选择${comment}">
                #if ("" != $dictType)## 有数据字典
          <SelectOption
            v-for="dict in $dictMethod(DICT_TYPE.$dictType.toUpperCase())"
            :key="dict.value"
            :label="dict.label"
            :value="dict.value"
          />
                #else##没数据字典
          <SelectOption label="请选择字典生成" value="" />
                #end
        </Select>
      </FormItem>
        #elseif($column.htmlType == "checkbox")## 多选框
      <FormItem label="${comment}" name="${javaField}">
        <CheckboxGroup v-model:value="formData.${javaField}">
                #if ("" != $dictType)## 有数据字典
          <Checkbox
            v-for="dict in $dictMethod(DICT_TYPE.$dictType.toUpperCase())"
            :key="dict.value"
            :label="dict.label"
            :value="dict.value"
          />
                #else##没数据字典
          <Checkbox label="请选择字典生成" />
                #end
        </CheckboxGroup>
      </FormItem>
        #elseif($column.htmlType == "radio")## 单选框
      <FormItem label="${comment}" name="${javaField}">
        <RadioGroup v-model:value="formData.${javaField}">
                #if ("" != $dictType)## 有数据字典
          <Radio
            v-for="dict in $dictMethod(DICT_TYPE.$dictType.toUpperCase())"
            :key="dict.value"
            :value="dict.value"
          >
            {{ dict.label }}
          </Radio>
                #else##没数据字典
          <Radio value="1">请选择字典生成</Radio>
                #end
        </RadioGroup>
      </FormItem>
        #elseif($column.htmlType == "datetime")## 时间框
      <FormItem label="${comment}" name="${javaField}">
        <DatePicker
          v-model:value="formData.${javaField}"
          valueFormat="x"
          placeholder="选择${comment}"
        />
      </FormItem>
        #elseif($column.htmlType == "textarea")## 文本框
      <FormItem label="${comment}" name="${javaField}">
        <Textarea v-model:value="formData.${javaField}" placeholder="请输入${comment}" />
      </FormItem>
        #end
    #end
#end
    </Form>
    <template #footer>
      <Button @click="submitForm" type="primary" :loading="formLoading">确 定</Button>
      <Button @click="dialogVisible = false">取 消</Button>
    </template>
  </Dialog>
</template>
<script setup lang="ts">
import { Form, FormItem, Input, Button, Select, SelectOption, DatePicker, Textarea, Checkbox, CheckboxGroup, Radio, RadioGroup } from 'ant-design-vue'
import { getIntDictOptions, getStrDictOptions, getBoolDictOptions, DICT_TYPE } from '@/utils/dict'
import { ${simpleClassName}Api } from '@/api/${table.moduleName}/${table.businessName}'

const { t } = useI18n() // 国际化
const message = useMessage() // 消息弹窗

const dialogVisible = ref(false) // 弹窗的是否展示
const dialogTitle = ref('') // 弹窗的标题
const formLoading = ref(false) // 表单的加载中：1）修改时的数据加载；2）提交的按钮禁用
const formType = ref('') // 表单的类型：create - 新增；update - 修改
const formData = ref({
#foreach ($column in $subColumns)
    #if ($column.createOperation || $column.updateOperation)
      #if ($column.htmlType == "checkbox")
  $column.javaField: [],
      #else
  $column.javaField: undefined,
      #end
    #end
#end
})
const formRules = reactive({
#foreach ($column in $subColumns)
    #if (($column.createOperation || $column.updateOperation) && !$column.nullable && !${column.primaryKey})## 创建或者更新操作 && 要求非空 && 非主键
        #set($comment=$column.columnComment)
  $column.javaField: [{ required: true, message: '${comment}不能为空', trigger: #if($column.htmlType == 'select')'change'#else'blur'#end }],
    #end
#end
})
const formRef = ref() // 表单 Ref

/** 打开弹窗 */
const open = async (type: string, id?: number, ${subJoinColumn.javaField}: number) => {
  dialogVisible.value = true
  dialogTitle.value = t('action.' + type)
  formType.value = type
  resetForm()
  formData.value.${subJoinColumn.javaField} = ${subJoinColumn.javaField}
  // 修改时，设置数据
  if (id) {
    formLoading.value = true
    try {
      formData.value = await ${simpleClassName}Api.get${subSimpleClassName}(id)
    } finally {
      formLoading.value = false
    }
  }
}
defineExpose({ open }) // 提供 open 方法，用于打开弹窗

/** 提交表单 */
const emit = defineEmits(['success']) // 定义 success 事件，用于操作成功后的回调
const submitForm = async () => {
  // 校验表单
  await formRef.value.validate()
  // 提交请求
  formLoading.value = true
  try {
    const data = formData.value
    if (formType.value === 'create') {
      await ${simpleClassName}Api.create${subSimpleClassName}(data)
      message.success(t('common.createSuccess'))
    } else {
      await ${simpleClassName}Api.update${subSimpleClassName}(data)
      message.success(t('common.updateSuccess'))
    }
    dialogVisible.value = false
    // 发送操作成功的事件
    emit('success')
  } finally {
    formLoading.value = false
  }
}

/** 重置表单 */
const resetForm = () => {
  formData.value = {
#foreach ($column in $subColumns)
  #if ($column.createOperation || $column.updateOperation)
      #if ($column.htmlType == "checkbox")
    $column.javaField: [],
      #else
    $column.javaField: undefined,
      #end
  #end
#end
  }
  formRef.value?.resetFields()
}
</script>
