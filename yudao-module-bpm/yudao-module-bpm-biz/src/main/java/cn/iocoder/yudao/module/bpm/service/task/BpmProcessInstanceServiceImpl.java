package cn.iocoder.yudao.module.bpm.service.task;import cn.hutool.core.collection.CollUtil;import cn.hutool.core.util.ArrayUtil;import cn.hutool.core.util.NumberUtil;import cn.hutool.core.util.ObjectUtil;import cn.hutool.core.util.StrUtil;import cn.iocoder.yudao.framework.common.pojo.PageResult;import cn.iocoder.yudao.framework.common.util.collection.CollectionUtils;import cn.iocoder.yudao.framework.common.util.collection.SetUtils;import cn.iocoder.yudao.framework.common.util.date.DateUtils;import cn.iocoder.yudao.framework.common.util.json.JsonUtils;import cn.iocoder.yudao.framework.common.util.number.NumberUtils;import cn.iocoder.yudao.framework.common.util.object.BeanUtils;import cn.iocoder.yudao.framework.common.util.object.PageUtils;import cn.iocoder.yudao.module.bpm.api.task.dto.BpmProcessInstanceCreateReqDTO;import cn.iocoder.yudao.module.bpm.controller.admin.base.user.UserSimpleBaseVO;import cn.iocoder.yudao.module.bpm.controller.admin.definition.vo.model.simple.BpmSimpleModelNodeVO;import cn.iocoder.yudao.module.bpm.controller.admin.definition.vo.process.BpmProcessDefinitionRespVO;import cn.iocoder.yudao.module.bpm.controller.admin.task.vo.instance.*;import cn.iocoder.yudao.module.bpm.controller.admin.task.vo.instance.BpmApprovalDetailRespVO.ApprovalTaskInfo;import cn.iocoder.yudao.module.bpm.controller.admin.task.vo.task.BpmTaskRespVO;import cn.iocoder.yudao.module.bpm.convert.definition.BpmProcessDefinitionConvert;import cn.iocoder.yudao.module.bpm.dal.dataobject.definition.BpmProcessDefinitionInfoDO;import cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants;import cn.iocoder.yudao.module.bpm.enums.definition.BpmModelTypeEnum;import cn.iocoder.yudao.module.bpm.enums.definition.BpmSimpleModelNodeType;import cn.iocoder.yudao.module.bpm.enums.task.BpmProcessInstanceStatusEnum;import cn.iocoder.yudao.module.bpm.enums.task.BpmReasonEnum;import cn.iocoder.yudao.module.bpm.enums.task.BpmTaskStatusEnum;import cn.iocoder.yudao.module.bpm.framework.flowable.core.candidate.BpmTaskCandidateInvoker;import cn.iocoder.yudao.module.bpm.framework.flowable.core.candidate.BpmTaskCandidateStrategy;import cn.iocoder.yudao.module.bpm.framework.flowable.core.candidate.strategy.BpmTaskCandidateStartUserSelectStrategy;import cn.iocoder.yudao.module.bpm.framework.flowable.core.enums.BpmnVariableConstants;import cn.iocoder.yudao.module.bpm.framework.flowable.core.event.BpmProcessInstanceEventPublisher;import cn.iocoder.yudao.module.bpm.framework.flowable.core.util.BpmnModelUtils;import cn.iocoder.yudao.module.bpm.framework.flowable.core.util.FlowableUtils;import cn.iocoder.yudao.module.bpm.framework.flowable.core.util.SimpleModelUtils;import cn.iocoder.yudao.module.bpm.service.definition.BpmProcessDefinitionService;import cn.iocoder.yudao.module.bpm.service.message.BpmMessageService;import cn.iocoder.yudao.module.bpm.service.task.bo.AlreadyRunApproveNodeRespBO;import cn.iocoder.yudao.module.system.api.dept.DeptApi;import cn.iocoder.yudao.module.system.api.dept.dto.DeptRespDTO;import cn.iocoder.yudao.module.system.api.user.AdminUserApi;import cn.iocoder.yudao.module.system.api.user.dto.AdminUserRespDTO;import com.google.common.collect.ArrayListMultimap;import com.google.common.collect.Multimap;import jakarta.annotation.Resource;import jakarta.validation.Valid;import lombok.extern.slf4j.Slf4j;import org.flowable.bpmn.constants.BpmnXMLConstants;import org.flowable.bpmn.model.BpmnModel;import org.flowable.bpmn.model.EndEvent;import org.flowable.bpmn.model.FlowElement;import org.flowable.bpmn.model.UserTask;import org.flowable.engine.HistoryService;import org.flowable.engine.ManagementService;import org.flowable.engine.RuntimeService;import org.flowable.engine.history.HistoricActivityInstance;import org.flowable.engine.history.HistoricProcessInstance;import org.flowable.engine.history.HistoricProcessInstanceQuery;import org.flowable.engine.repository.ProcessDefinition;import org.flowable.engine.runtime.ProcessInstance;import org.flowable.task.api.history.HistoricTaskInstance;import org.springframework.context.annotation.Lazy;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.validation.annotation.Validated;import java.util.*;import java.util.stream.Stream;import static cn.iocoder.yudao.framework.common.exception.util.ServiceExceptionUtil.exception;import static cn.iocoder.yudao.framework.common.util.collection.CollectionUtils.*;import static cn.iocoder.yudao.module.bpm.controller.admin.task.vo.instance.BpmApprovalDetailRespVO.ApprovalNodeInfo;import static cn.iocoder.yudao.module.bpm.convert.task.BpmProcessInstanceConvert.INSTANCE;import static cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants.*;import static cn.iocoder.yudao.module.bpm.enums.definition.BpmSimpleModelNodeType.*;import static cn.iocoder.yudao.module.bpm.enums.definition.BpmUserTaskApproveTypeEnum.USER;import static cn.iocoder.yudao.module.bpm.enums.task.BpmTaskStatusEnum.*;import static cn.iocoder.yudao.module.bpm.framework.flowable.core.enums.BpmTaskCandidateStrategyEnum.START_USER;import static cn.iocoder.yudao.module.bpm.framework.flowable.core.enums.BpmnModelConstants.START_USER_NODE_ID;/** * 流程实例 Service 实现类 * <p> * ProcessDefinition & ProcessInstance & Execution & Task 的关系： * 1. <a href="https://blog.csdn.net/bobozai86/article/details/105210414" /> * <p> * HistoricProcessInstance & ProcessInstance 的关系： * 1. <a href=" https://my.oschina.net/843294669/blog/71902" /> * <p> * 简单来说，前者 = 历史 + 运行中的流程实例，后者仅是运行中的流程实例 * * @author 芋道源码 */@Service@Validated@Slf4jpublic class BpmProcessInstanceServiceImpl implements BpmProcessInstanceService {    @Resource    private RuntimeService runtimeService;    @Resource    private HistoryService historyService;    @Resource    private ManagementService managementService;    @Resource    private BpmActivityService activityService;    @Resource    private BpmProcessDefinitionService processDefinitionService;    @Resource    @Lazy // 避免循环依赖    private BpmTaskService taskService;    @Resource    private BpmMessageService messageService;    @Resource    private BpmTaskCandidateInvoker bpmTaskCandidateInvoker;    @Resource    private AdminUserApi adminUserApi;    @Resource    private DeptApi deptApi;    @Resource    private BpmProcessInstanceEventPublisher processInstanceEventPublisher;    // ========== Query 查询相关方法 ==========    @Override    public ProcessInstance getProcessInstance(String id) {        return runtimeService.createProcessInstanceQuery()                .includeProcessVariables()                .processInstanceId(id)                .singleResult();    }    @Override    public List<ProcessInstance> getProcessInstances(Set<String> ids) {        return runtimeService.createProcessInstanceQuery().processInstanceIds(ids).list();    }    @Override    public HistoricProcessInstance getHistoricProcessInstance(String id) {        return historyService.createHistoricProcessInstanceQuery().processInstanceId(id).includeProcessVariables().singleResult();    }    @Override    public List<HistoricProcessInstance> getHistoricProcessInstances(Set<String> ids) {        return historyService.createHistoricProcessInstanceQuery().processInstanceIds(ids).list();    }    @Override    public PageResult<HistoricProcessInstance> getProcessInstancePage(Long userId,                                                                      BpmProcessInstancePageReqVO pageReqVO) {        // 通过 BpmProcessInstanceExtDO 表，先查询到对应的分页        HistoricProcessInstanceQuery processInstanceQuery = historyService.createHistoricProcessInstanceQuery()                .includeProcessVariables()                .processInstanceTenantId(FlowableUtils.getTenantId())                .orderByProcessInstanceStartTime().desc();        if (userId != null) { // 【我的流程】菜单时，需要传递该字段            processInstanceQuery.startedBy(String.valueOf(userId));        } else if (pageReqVO.getStartUserId() != null) { // 【管理流程】菜单时，才会传递该字段            processInstanceQuery.startedBy(String.valueOf(pageReqVO.getStartUserId()));        }        if (StrUtil.isNotEmpty(pageReqVO.getName())) {            processInstanceQuery.processInstanceNameLike("%" + pageReqVO.getName() + "%");        }        if (StrUtil.isNotEmpty(pageReqVO.getProcessDefinitionKey())) {            processInstanceQuery.processDefinitionKey(pageReqVO.getProcessDefinitionKey());        }        if (StrUtil.isNotEmpty(pageReqVO.getCategory())) {            processInstanceQuery.processDefinitionCategory(pageReqVO.getCategory());        }        if (pageReqVO.getStatus() != null) {            processInstanceQuery.variableValueEquals(BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS, pageReqVO.getStatus());        }        if (ArrayUtil.isNotEmpty(pageReqVO.getCreateTime())) {            processInstanceQuery.startedAfter(DateUtils.of(pageReqVO.getCreateTime()[0]));            processInstanceQuery.startedBefore(DateUtils.of(pageReqVO.getCreateTime()[1]));        }        // 查询数量        long processInstanceCount = processInstanceQuery.count();        if (processInstanceCount == 0) {            return PageResult.empty(processInstanceCount);        }        // 查询列表        List<HistoricProcessInstance> processInstanceList = processInstanceQuery.listPage(PageUtils.getStart(pageReqVO), pageReqVO.getPageSize());        return new PageResult<>(processInstanceList, processInstanceCount);    }    private Map<String, String> getFormFieldsPermission(BpmnModel bpmnModel,                                                        String activityId, String taskId) {        // 1. 获取流程活动编号。流程活动 Id 为空事，从流程任务中获取流程活动 Id        if (StrUtil.isEmpty(activityId) && StrUtil.isNotEmpty(taskId)) {            activityId = Optional.ofNullable(taskService.getHistoricTask(taskId))                    .map(HistoricTaskInstance::getTaskDefinitionKey).orElse(null);        }        if (StrUtil.isEmpty(activityId)) {            return null;        }        // 2. 从 BpmnModel 中解析表单字段权限        return BpmnModelUtils.parseFormFieldsPermission(bpmnModel, activityId);    }    @Override    public BpmApprovalDetailRespVO getApprovalDetail(Long loginUserId, BpmApprovalDetailReqVO reqVO) {        // 1. 设置流程未发起的值        // 1.1 流程状态        Integer processInstanceStatus = BpmProcessInstanceStatusEnum.NOT_START.getStatus();  // 流程未发起的状态        // 1.2 流程定义 Id        String processDefinitionId = reqVO.getProcessDefinitionId(); // 流程未发起前端传入        // 1.3. 流程实例        BpmProcessInstanceRespVO processInstanceResp = null; // 流程未发起时为 null        // 1.4 以下是用于流程预测的值        Long startUserId = loginUserId;  // 流程发起人。流程未发起时,发起人设置成登录人        ProcessInstance runProcessInstance = null;  // 正在运行的流程实例,流程未发起时为 null        Set<String> runNodeIds = new HashSet<>();  // 已经运行的节点 Ids (BPMN XML 节点 Id)        Map<String, ApprovalNodeInfo> runningApprovalNodes = new HashMap<>(); // 正在运行的节点的审批信息        List<ApprovalNodeInfo> approvalNodes = new ArrayList<>(); // 审批节点的信息。流程未发起时为空        // 2 设置流程已发起的值        if (reqVO.getProcessInstanceId() != null) {            // 2.1 流程状态            HistoricProcessInstance processInstance = getHistoricProcessInstance(reqVO.getProcessInstanceId());            if (processInstance == null) {                throw exception(ErrorCodeConstants.PROCESS_INSTANCE_NOT_EXISTS);            }            processInstanceStatus = FlowableUtils.getProcessInstanceStatus(processInstance);            // 2.2 流程定义 Id            processDefinitionId = processInstance.getProcessDefinitionId();            // 2.3 流程实例            AdminUserRespDTO startUser = adminUserApi.getUser(NumberUtils.parseLong(processInstance.getStartUserId()));            DeptRespDTO dept = null;            if (startUser != null && startUser.getDeptId() != null) {                dept = deptApi.getDept(startUser.getDeptId());            }            processInstanceResp = INSTANCE.buildProcessInstance(processInstance, null,                    null, startUser, dept);            // 2.4 以下是用于流程预测的值            startUserId = Long.valueOf(processInstance.getStartUserId()); // 流程发起人            runProcessInstance = getProcessInstance(processInstance.getId()); // 正在运行的流程实例            List<HistoricActivityInstance> historicActivityList = activityService.getActivityListByProcessInstanceId(processInstance.getId());            AlreadyRunApproveNodeRespBO respBO = buildAlreadyRunApproveNodes(processInstance.getId(), processInstanceStatus, historicActivityList);            runNodeIds = respBO.getRunNodeIds(); // 已经运行的节点 ID 数组            approvalNodes = respBO.getApproveNodes(); // // 获取已运行节点的审批的信息            runningApprovalNodes = respBO.getRunningApprovalNodes(); // 正在运行的节点的审批信息        }        // 3. 流程定义        ProcessDefinition processDefinition = processDefinitionService.getProcessDefinition(processDefinitionId);        BpmProcessDefinitionInfoDO processDefinitionInfo = processDefinitionService.getProcessDefinitionInfo(processDefinitionId);        BpmnModel bpmnModel = processDefinitionService.getProcessDefinitionBpmnModel(processDefinitionId);        // TODO  芋艿：这里仅仅用于临时测试，后续要清理        if (false && processInstanceResp != null) {            ProcessInstance processInstance = getProcessInstance(processInstanceResp.getId());            List<FlowElement> flowElements = BpmnModelUtils.simulateProcess(bpmnModel, processInstance.getProcessVariables());            System.out.println(flowElements);        }        if (false && processInstanceResp != null) {            BpmSimpleModelNodeVO simpleModel = JsonUtils.parseObject(processDefinitionInfo.getSimpleModel(), BpmSimpleModelNodeVO.class);            ProcessInstance processInstance = getProcessInstance(processInstanceResp.getId());            List<BpmSimpleModelNodeVO> flowElements = SimpleModelUtils.simulateProcess(simpleModel, processInstance.getProcessVariables());            System.out.println(flowElements);        }        List<UserTask> userTaskList = BpmTaskCandidateStartUserSelectStrategy.getStartUserSelectUserTaskList(bpmnModel);        BpmProcessDefinitionRespVO definitionResp = BpmProcessDefinitionConvert.INSTANCE.buildProcessDefinition(                processDefinition, null, processDefinitionInfo, null, null, bpmnModel, userTaskList        );        // 4. 表单权限        Map<String, String> formFieldsPermission = getFormFieldsPermission(bpmnModel, reqVO.getActivityId(), reqVO.getTaskId());        // 5 .登录用户的待办任务        // TODO @jason：有一个极端情况，如果一个用户有 2 个 task A 和 B，A 已经通过，B 需要审核。这个时，通过 A 进来，todo 拿到 B，会不会表单权限不一致哈。        // 目前的想法，是不是不依赖前端传递参数。而是后端推导，按照一个顺序。待审批 》 taskId/activityId        BpmTaskRespVO todoTask = taskService.getFirstTodoTask(loginUserId, reqVO.getProcessInstanceId());        // 流程已经结束，直接 return，无需预测        if (BpmProcessInstanceStatusEnum.isProcessEndStatus(processInstanceStatus)) {            return new BpmApprovalDetailRespVO().setStatus(processInstanceStatus)                    .setProcessDefinition(definitionResp).setProcessInstance(processInstanceResp)                    .setFormFieldsPermission(formFieldsPermission)                    .setTodoTask(todoTask).setApproveNodes(approvalNodes);        }        // 6，预测未运行节点的审批信息。需要区分 BPMN 设计器 和 SIMPLE 设计器        // 6.1 情况一：仿钉钉流程设计器        if (Objects.equals(BpmModelTypeEnum.SIMPLE.getType(), processDefinitionInfo.getModelType())) {            BpmSimpleModelNodeVO simpleModel = JsonUtils.parseObject(processDefinitionInfo.getSimpleModel(), BpmSimpleModelNodeVO.class);            List<ApprovalNodeInfo> notRunApproveNodes = new ArrayList<>();            traverseSimpleModelNodeToBuildNotRunApproveNodes(                    startUserId, runProcessInstance, simpleModel, runNodeIds, runningApprovalNodes, notRunApproveNodes);            approvalNodes.addAll(notRunApproveNodes);            // 6.2 情况二：BPMN 流程设计器        } else if (Objects.equals(BpmModelTypeEnum.BPMN.getType(), processDefinitionInfo.getModelType())) {            // TODO 芋艿：需要把 start 节点加出来            // TODO Bpmn 设计器，构建未运行节点的审批信息；未完全实现            List<ApprovalNodeInfo> notRunApproveNodes = new ArrayList<>();            traverseSimpleModelNodeToBuildNotRunApproveNodes(startUserId, runProcessInstance, bpmnModel, runNodeIds, runningApprovalNodes, notRunApproveNodes);            approvalNodes.addAll(notRunApproveNodes);        }        return new BpmApprovalDetailRespVO().setStatus(processInstanceStatus)                .setProcessDefinition(definitionResp).setProcessInstance(processInstanceResp)                .setFormFieldsPermission(formFieldsPermission)                .setTodoTask(todoTask).setApproveNodes(approvalNodes);    }    /**     * 遍历 SIMPLE 设计器模型 构建未运行节点的审批信息     *     * @param startUserId          流程发起人编号     * @param processInstance      流程实例     * @param simpleModelNode      SIMPLE 设计器模型     * @param runNodeIds           已经运行节点的 Ids     * @param runningApprovalNodes 正在运行的节点的审批信息     * @param approveNodeList      未运行节点的审批信息列表     */    private void traverseSimpleModelNodeToBuildNotRunApproveNodes(Long startUserId,                                                                  ProcessInstance processInstance,                                                                  BpmSimpleModelNodeVO simpleModelNode,                                                                  Set<String> runNodeIds,                                                                  Map<String, ApprovalNodeInfo> runningApprovalNodes,                                                                  List<ApprovalNodeInfo> approveNodeList) {        List<BpmSimpleModelNodeVO> nodeElements = SimpleModelUtils.simulateProcess(simpleModelNode, processInstance.getProcessVariables());        if (CollUtil.isEmpty(nodeElements)) {            return;        }        for (BpmSimpleModelNodeVO nodeElement : nodeElements) {            buildNotRunApproveNodes(startUserId, processInstance, nodeElement, runNodeIds, runningApprovalNodes, approveNodeList);        }    }    private void buildNotRunApproveNodes(Long startUserId, ProcessInstance processInstance,                                         BpmSimpleModelNodeVO node, Set<String> runNodeIds,                                         Map<String, ApprovalNodeInfo> runningApprovalNodes,                                         List<ApprovalNodeInfo> approveNodeList) {        // 情况一：节点未运行：需要进行预测        if (!runNodeIds.contains(node.getId())) {            // 1. 对需要人工审批的审批节点，进行预测            if (APPROVE_NODE.getType().equals(node.getType()) && USER.getType().equals(node.getApproveType()) // TODO jason：非 USER 审批，也要展示哈。                    || START_USER_NODE.getType().equals(node.getType())) {                ApprovalNodeInfo approvalNodeInfo = new ApprovalNodeInfo().setNodeType(node.getType())                        .setName(node.getName()).setStatus(NOT_START.getStatus());                Integer candidateStrategy = START_USER_NODE.getType().equals(node.getType()) ?                        START_USER.getStrategy() : node.getCandidateStrategy();                approvalNodeInfo.setCandidateUsers(                        getNotRunTaskCandidateUserList(startUserId, processInstance, node.getId(), candidateStrategy, node.getCandidateParam()));                approveNodeList.add(approvalNodeInfo);                // 2. 结束节点            } else if (END_NODE.getType().equals(node.getType())) {                approveNodeList.add(new ApprovalNodeInfo().setNodeType(node.getType())                        .setName(node.getName()).setStatus(NOT_START.getStatus()));            }        } else {            // 情况二：节点已经运行            if (SimpleModelUtils.isSequentialApproveNode(node) && runningApprovalNodes.containsKey(node.getId())) {                ApprovalNodeInfo approvalNodeInfo = runningApprovalNodes.get(node.getId());                List<UserSimpleBaseVO> candidateUserList = getNotRunTaskCandidateUserList(                        startUserId, processInstance, node.getId(), node.getCandidateStrategy(), node.getCandidateParam());                // TODO @jason：这里的逻辑，可能可以简化成，直接拿已经审批过的人的 userId 集合，从 candidateUserList remove 下。一方面简单一点，方面 calculateUsers 返回的是 set，目前不是很有序。                // TODO @芋艿  已经审批过的人的 userId 集合。不知道如何获取，不知道有啥好方法没。 如果取这个节点已经完成的审批任务。 是不是有可能包含退回的情况。就不太对了。 另外 candidateUserList 是按返回 set 遍历顺序返回的。和 set 的顺序是一致的。就不会有问题了                ApprovalTaskInfo approvalTaskInfo = CollUtil.getFirst(approvalNodeInfo.getTasks());                Long currentAssignedUserId = null;                if (approvalTaskInfo != null && approvalTaskInfo.getAssigneeUser() != null) {                    currentAssignedUserId = approvalTaskInfo.getAssigneeUser().getId();                }                // 找到当前审批人在候选人列表的位置                int index = 0;                for (UserSimpleBaseVO user : candidateUserList) {                    if (user.getId().equals(currentAssignedUserId)) {                        break;                    }                    index++;                }                // 截取当前审批人位置后面的候选人, 不包含当前审批人                approvalNodeInfo.setCandidateUsers(CollUtil.sub(candidateUserList, ++index, candidateUserList.size()));            }        }    }    /**     * 遍历 BPMN 设计器模型 构建未运行节点的审批信息     *     * @param processInstance      流程实例     * @param bpmnModel            BPMN 设计器模型     * @param runNodeIds           已经运行节点的 Ids     * @param runningApprovalNodes 正在运行的节点的审批信息     * @param approveNodeList      未运行节点的审批信息列表     */    private void traverseSimpleModelNodeToBuildNotRunApproveNodes(Long startUserId,                                                                  ProcessInstance processInstance,                                                                  BpmnModel bpmnModel,                                                                  Set<String> runNodeIds,                                                                  Map<String, ApprovalNodeInfo> runningApprovalNodes,                                                                  List<ApprovalNodeInfo> approveNodeList) {        List<FlowElement> flowElements = BpmnModelUtils.simulateProcess(bpmnModel, processInstance.getProcessVariables());        if (CollUtil.isEmpty(flowElements)) {            return;        }        for (FlowElement flowElement : flowElements) {            buildNotRunApproveNodes(startUserId, processInstance, flowElement, runNodeIds, runningApprovalNodes, approveNodeList);        }    }    private void buildNotRunApproveNodes(Long startUserId,                                         ProcessInstance processInstance,                                         FlowElement node,                                         Set<String> runNodeIds,                                         Map<String, ApprovalNodeInfo> runningApprovalNodes,                                         List<ApprovalNodeInfo> approveNodeList) {        // 情况一：节点未运行：需要进行预测        if (!runNodeIds.contains(node.getId())) {            // 1. 对需要人工审批的审批节点，进行预测            if (node instanceof UserTask) {                ApprovalNodeInfo approvalNodeInfo = new ApprovalNodeInfo().setNodeType(APPROVE_NODE.getType())                        .setName(node.getName()).setStatus(NOT_START.getStatus());                Integer candidateStrategy = BpmnModelUtils.parseCandidateStrategy(node);                String candidateParam = BpmnModelUtils.parseCandidateParam(node);                approvalNodeInfo.setCandidateUsers(                        getNotRunTaskCandidateUserList(startUserId, processInstance, node.getId(), candidateStrategy, candidateParam));                approveNodeList.add(approvalNodeInfo);                // 2. 结束节点            } else if (node instanceof EndEvent) {                approveNodeList.add(new ApprovalNodeInfo().setNodeType(END_NODE.getType())                        .setName(node.getName()).setStatus(NOT_START.getStatus()));            }        } else {            // 情况二：节点已经运行            if (BpmnModelUtils.isSequentialUserTask(node) && runningApprovalNodes.containsKey(node.getId())) {                ApprovalNodeInfo approvalNodeInfo = runningApprovalNodes.get(node.getId());                Integer candidateStrategy = BpmnModelUtils.parseCandidateStrategy(node);                String candidateParam = BpmnModelUtils.parseCandidateParam(node);                List<UserSimpleBaseVO> candidateUserList = getNotRunTaskCandidateUserList(                        startUserId, processInstance, node.getId(),candidateStrategy, candidateParam);                // TODO @jason：这里的逻辑，可能可以简化成，直接拿已经审批过的人的 userId 集合，从 candidateUserList remove 下。一方面简单一点，方面 calculateUsers 返回的是 set，目前不是很有序。                // TODO @芋艿  已经审批过的人的 userId 集合。不知道如何获取，不知道有啥好方法没。 如果取这个节点已经完成的审批任务。 是不是有可能包含退回的情况。就不太对了。 另外 candidateUserList 是按返回 set 遍历顺序返回的。和 set 的顺序是一致的。就不会有问题了                ApprovalTaskInfo approvalTaskInfo = CollUtil.getFirst(approvalNodeInfo.getTasks());                Long currentAssignedUserId = null;                if (approvalTaskInfo != null && approvalTaskInfo.getAssigneeUser() != null) {                    currentAssignedUserId = approvalTaskInfo.getAssigneeUser().getId();                }                // 找到当前审批人在候选人列表的位置                int index = 0;                for (UserSimpleBaseVO user : candidateUserList) {                    if (user.getId().equals(currentAssignedUserId)) {                        break;                    }                    index++;                }                // 截取当前审批人位置后面的候选人, 不包含当前审批人                approvalNodeInfo.setCandidateUsers(CollUtil.sub(candidateUserList, ++index, candidateUserList.size()));            }        }    }    /**     * 从已经运行活动节点构建的审批信息列表     *     * @param processInstanceId     流程实例 Id     * @param processInstanceStatus 流程实例状态     * @param historicActivityList  已经运行活动     */    private AlreadyRunApproveNodeRespBO buildAlreadyRunApproveNodes(String processInstanceId,                                                                    Integer processInstanceStatus,                                                                    List<HistoricActivityInstance> historicActivityList) {        // 1.1 获取待处理活动：只有 "userTask" 和 "endEvent" 需要处理        List<HistoricActivityInstance> pendingActivityNodes = filterList(historicActivityList,                item -> BpmSimpleModelNodeType.isRecordNode(item.getActivityType()));        // 1.2 已运行节点的 activityId        Set<String> runNodeIds = convertSet(historicActivityList, HistoricActivityInstance::getActivityId);        // 2.1 获取已运行的任务(包括运行中的任务)        List<HistoricTaskInstance> taskList = taskService.getTaskListByProcessInstanceId(processInstanceId, false);        Map<String, HistoricTaskInstance> taskMap = convertMap(taskList, HistoricTaskInstance::getId);        // 2.2 获取加签的任务        Map<String, List<HistoricTaskInstance>> addSignTaskMap = convertMultiMap(                filterList(taskList, task -> StrUtil.isNotEmpty(task.getParentTaskId())), HistoricTaskInstance::getParentTaskId);        // 3.1 获取节点的用户信息        // TODO @芋艿：其实 user 信息的获取，可以最终返回的时候处理。这样，可以进一步简化此处的逻辑；在 ApprovalNodeInfo 搞个不返回给前端的字段。最终 convert 的时候，在把转换成 ownerUser、assigneeUser 这种        Set<Long> userIds = CollectionUtils.convertSetByFlatMap(pendingActivityNodes, activity -> {            if (BPMN_USER_TASK_TYPE.equals(activity.getActivityType())) {                HistoricTaskInstance task = taskMap.get(activity.getTaskId());                Set<Long> taskUsers = CollUtil.newHashSet();                CollUtil.addIfAbsent(taskUsers, NumberUtil.parseLong(task.getAssignee(), null));                CollUtil.addIfAbsent(taskUsers, NumberUtil.parseLong(task.getOwner(), null));                List<HistoricTaskInstance> addSignTasks = addSignTaskMap.get(activity.getTaskId());                if (CollUtil.isNotEmpty(addSignTasks)) {                    addSignTasks.forEach(item -> {                        CollUtil.addIfAbsent(taskUsers, NumberUtil.parseLong(item.getAssignee(), null));                        CollUtil.addIfAbsent(taskUsers, NumberUtil.parseLong(item.getOwner(), null));                    });                }                return taskUsers.stream();            } else {                return Stream.empty();            }        });        Map<Long, AdminUserRespDTO> userMap = convertMap(adminUserApi.getUserList(userIds), AdminUserRespDTO::getId);        // 3.2 已经结束的任务转换为审批信息        final Multimap<String, HistoricActivityInstance> runningTask = ArrayListMultimap.create(); // 运行中的任务        List<ApprovalNodeInfo> approvalNodeList = convertList(pendingActivityNodes, activity -> {            ApprovalNodeInfo approvalNodeInfo = new ApprovalNodeInfo().setId(activity.getId()).setName(activity.getActivityName())                    .setStartTime(DateUtils.of(activity.getStartTime())).setEndTime(DateUtils.of(activity.getEndTime()));            if (BPMN_USER_TASK_TYPE.equals(activity.getActivityType())) { // 用户任务                // nodeType                approvalNodeInfo.setNodeType(START_USER_NODE_ID.equals(activity.getActivityId()) ?                        START_USER_NODE.getType() : APPROVE_NODE.getType());                // status                HistoricTaskInstance task = taskMap.get(activity.getTaskId());                Integer taskStatus = FlowableUtils.getTaskStatus(task);                // 运行中的任务, 会签，或签任务聚合在一起。                if (!BpmTaskStatusEnum.isEndStatus(taskStatus)) {                    runningTask.put(activity.getActivityId(), activity);                    return null;                }                // tasks                ApprovalTaskInfo approveTask = convertApproveTaskInfo(task, userMap);                List<ApprovalTaskInfo> approveTasks = CollUtil.newArrayList(approveTask);                // TODO @jason：会有加签任务的加签，A 加 B，B 加 C，C 加 D 这种；最好么，477 到 480 这种，和 510 到 513 这种，封装个小方法。                List<HistoricTaskInstance> addSignTasks = addSignTaskMap.get(activity.getTaskId());                if (CollUtil.isNotEmpty(addSignTasks)) { // 处理加签任务                    approveTasks.addAll(convertList(addSignTasks, item -> convertApproveTaskInfo(item, userMap)));                }                approvalNodeInfo.setStatus(taskStatus);                approvalNodeInfo.setTasks(approveTasks);            } else if (END_NODE.getBpmnType().equals(activity.getActivityType())) {                approvalNodeInfo.setNodeType(END_NODE.getType());                approvalNodeInfo.setStatus(processInstanceStatus);            }            return approvalNodeInfo;        });        // 3.3 运行中的任务转换为审批信息。        final Map<String, ApprovalNodeInfo> runningApprovalNodes = new HashMap<>(); // 正在运行节点的审批信息        runningTask.asMap().forEach((activityId, activities) -> {            if (CollUtil.isNotEmpty(activities)) {                ApprovalNodeInfo approvalNodeInfo = new ApprovalNodeInfo();                approvalNodeInfo.setNodeType(APPROVE_NODE.getType());                approvalNodeInfo.setStatus(RUNNING.getStatus());                List<ApprovalTaskInfo> approveTasks = CollUtil.newArrayList();                int i = 0; // TODO @jason：直接获取第一个，这样逻辑会更简单纯粹一点，firActivity；这样，循环里面，就不用做这个事情了哈。                for (HistoricActivityInstance activity : activities) {                    HistoricTaskInstance task = taskMap.get(activity.getTaskId());                    // 取第一个任务， 会签/或签的任务。开始时间相同的                    if (i == 0) {                        approvalNodeInfo.setId(activity.getId()).setName(activity.getActivityName()).                                setStartTime(DateUtils.of(activity.getStartTime()));                    }                    // tasks                    ApprovalTaskInfo approveTask = convertApproveTaskInfo(task, userMap);                    approveTasks.add(approveTask);                    List<HistoricTaskInstance> addSignTasks = addSignTaskMap.get(activity.getTaskId());                    if (CollUtil.isNotEmpty(addSignTasks)) { // 处理加签任务                        approveTasks.addAll(convertList(addSignTasks, item -> convertApproveTaskInfo(item, userMap)));                    }                    i++;                }                approvalNodeInfo.setTasks(approveTasks);                approvalNodeList.add(approvalNodeInfo);                runningApprovalNodes.put(activityId, approvalNodeInfo);            }        });        // TODO 芋艿：从 bpmn 视角，可能 startEvent 也需要        if (StrUtil.isNotEmpty(processInstanceId)) {            ApprovalNodeInfo startNode = CollUtil.getFirst(approvalNodeList);            if (startNode == null || !START_USER_NODE.getType().equals(startNode.getNodeType())) {                startNode = new ApprovalNodeInfo().setId(START_USER_NODE_ID).setName(START_USER_NODE.getName())                       .setNodeType(START_USER_NODE.getType()).setStatus(APPROVE.getStatus());//                        .setCandidateUsers(singletonList(BeanUtils.toBean(userMap.get()))); // TODO 芋艿：发起人的信息，没读取。                approvalNodeList.add(0, startNode);            }        }        return new AlreadyRunApproveNodeRespBO().setApproveNodes(approvalNodeList).setRunNodeIds(runNodeIds)                .setRunningApprovalNodes(runningApprovalNodes);    }    private ApprovalTaskInfo convertApproveTaskInfo(HistoricTaskInstance task, Map<Long, AdminUserRespDTO> userMap) {        if (task == null) {            return null;        }        ApprovalTaskInfo approveTask = BeanUtils.toBean(task, ApprovalTaskInfo.class);        approveTask.setStatus(FlowableUtils.getTaskStatus(task)).setReason(FlowableUtils.getTaskReason(task));        Long taskAssignee = NumberUtil.parseLong(task.getAssignee(), null);        if (taskAssignee != null) {            approveTask.setAssigneeUser(BeanUtils.toBean(userMap.get(taskAssignee), UserSimpleBaseVO.class));        }        Long taskOwner = NumberUtil.parseLong(task.getOwner(), null);        if (taskOwner != null) {            approveTask.setOwnerUser(BeanUtils.toBean(userMap.get(taskOwner), UserSimpleBaseVO.class));        }        return approveTask;    }    private List<UserSimpleBaseVO> getNotRunTaskCandidateUserList(Long startUserId, ProcessInstance processInstance, String activityId,                                                                  Integer candidateStrategy, String candidateParam) {        BpmTaskCandidateStrategy taskCandidateStrategy = bpmTaskCandidateInvoker.getCandidateStrategy(candidateStrategy);        Set<Long> userIds = taskCandidateStrategy.calculateUsers(startUserId, processInstance, activityId, candidateParam);        Map<Long, AdminUserRespDTO> adminUserMap = adminUserApi.getUserMap(userIds);        // 需要按照候选人的顺序返回。原因是，依次审批需要按顺序展示用户        return convertList(userIds, userId -> BeanUtils.toBean(adminUserMap.get(userId), UserSimpleBaseVO.class));    }    @Override    public BpmProcessInstanceBpmnModelViewRespVO getProcessInstanceBpmnModelView(String id) {        // 1.1 获得流程实例        HistoricProcessInstance processInstance = getHistoricProcessInstance(id);        if (processInstance == null) {            return null;        }        // 1.2 获得流程定义        BpmnModel bpmnModel = processDefinitionService.getProcessDefinitionBpmnModel(processInstance.getProcessDefinitionId());        if (bpmnModel == null) {            return null;        }        // 1.3 获得流程实例对应的活动实例列表 + 任务列表        List<HistoricActivityInstance> activityInstances = getActivityListByProcessInstanceId(id);        List<HistoricTaskInstance> taskInstances = taskService.getTaskListByProcessInstanceId(id, true);        // 2.1 拼接进度信息        Set<String> unfinishedTaskActivityIds = convertSet(activityInstances, HistoricActivityInstance::getActivityId,                activityInstance -> activityInstance.getEndTime() == null);        Set<String> finishedTaskActivityIds = convertSet(activityInstances, HistoricActivityInstance::getActivityId,                activityInstance -> activityInstance.getEndTime() != null                        && ObjectUtil.notEqual(activityInstance.getActivityType(), BpmnXMLConstants.ELEMENT_SEQUENCE_FLOW));        Set<String> finishedSequenceFlowActivityIds = convertSet(activityInstances, HistoricActivityInstance::getActivityId,                activityInstance -> activityInstance.getEndTime() != null                        && ObjectUtil.equals(activityInstance.getActivityType(), BpmnXMLConstants.ELEMENT_SEQUENCE_FLOW));        // 特殊：会签情况下，会有部分已完成（审批）、部分未完成（待审批），此时需要 finishedTaskActivityIds 移除掉        unfinishedTaskActivityIds.removeAll(finishedTaskActivityIds);        // 特殊：如果流程实例被拒绝，则需要计算是哪个活动节点。        // 注意，只取最后一个。因为会存在多次拒绝的情况，拒绝驳回到指定节点        Set<String> rejectTaskActivityIds = CollUtil.newHashSet();        if (BpmProcessInstanceStatusEnum.isRejectStatus(FlowableUtils.getProcessInstanceStatus(processInstance))) {            taskInstances.stream()                    .filter(task -> BpmTaskStatusEnum.isRejectStatus(FlowableUtils.getTaskStatus(task)))                    .max(Comparator.comparing(HistoricTaskInstance::getEndTime))                    .ifPresent(reject -> rejectTaskActivityIds.add(reject.getTaskDefinitionKey()));            finishedTaskActivityIds.removeAll(rejectTaskActivityIds);        }        // 2.2 拼接基础信息        Set<Long> userIds = SetUtils.asSet(Long.valueOf(processInstance.getStartUserId()));        taskInstances.forEach(task -> {            CollUtil.addIfAbsent(userIds, NumberUtils.parseLong((task.getAssignee())));            CollUtil.addIfAbsent(userIds, NumberUtils.parseLong((task.getOwner())));        });        Map<Long, AdminUserRespDTO> userMap = adminUserApi.getUserMap(userIds);        Map<Long, DeptRespDTO> deptMap = deptApi.getDeptMap(                convertSet(userMap.values(), AdminUserRespDTO::getDeptId));        return INSTANCE.buildProcessInstanceBpmnModelView(processInstance, taskInstances, bpmnModel,                unfinishedTaskActivityIds, finishedTaskActivityIds, finishedSequenceFlowActivityIds, rejectTaskActivityIds,                userMap, deptMap);    }    private List<HistoricActivityInstance> getActivityListByProcessInstanceId(String id) {        return historyService.createHistoricActivityInstanceQuery().processInstanceId(id)                .orderByHistoricActivityInstanceStartTime().asc().list();    }    // ========== Update 写入相关方法 ==========    @Override    @Transactional(rollbackFor = Exception.class)    public String createProcessInstance(Long userId, @Valid BpmProcessInstanceCreateReqVO createReqVO) {        // 获得流程定义        ProcessDefinition definition = processDefinitionService.getProcessDefinition(createReqVO.getProcessDefinitionId());        // 发起流程        return createProcessInstance0(userId, definition, createReqVO.getVariables(), null,                createReqVO.getStartUserSelectAssignees());    }    @Override    public String createProcessInstance(Long userId, @Valid BpmProcessInstanceCreateReqDTO createReqDTO) {        // 获得流程定义        ProcessDefinition definition = processDefinitionService.getActiveProcessDefinition(createReqDTO.getProcessDefinitionKey());        // 发起流程        return createProcessInstance0(userId, definition, createReqDTO.getVariables(), createReqDTO.getBusinessKey(),                createReqDTO.getStartUserSelectAssignees());    }    private String createProcessInstance0(Long userId, ProcessDefinition definition,                                          Map<String, Object> variables, String businessKey,                                          Map<String, List<Long>> startUserSelectAssignees) {        // 1.1 校验流程定义        if (definition == null) {            throw exception(PROCESS_DEFINITION_NOT_EXISTS);        }        if (definition.isSuspended()) {            throw exception(PROCESS_DEFINITION_IS_SUSPENDED);        }        BpmProcessDefinitionInfoDO processDefinitionInfo = processDefinitionService.getProcessDefinitionInfo(definition.getId());        if (processDefinitionInfo == null) {            throw exception(PROCESS_DEFINITION_NOT_EXISTS);        }        // 1.2 校验是否能够发起        if (!processDefinitionService.canUserStartProcessDefinition(processDefinitionInfo, userId)) {            throw exception(PROCESS_INSTANCE_START_USER_CAN_START);        }        // 1.3 校验发起人自选审批人        validateStartUserSelectAssignees(definition, startUserSelectAssignees);        // 2. 创建流程实例        if (variables == null) {            variables = new HashMap<>();        }        FlowableUtils.filterProcessInstanceFormVariable(variables); // 过滤一下，避免 ProcessInstance 系统级的变量被占用        variables.put(BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS, // 流程实例状态：审批中                BpmProcessInstanceStatusEnum.RUNNING.getStatus());        if (CollUtil.isNotEmpty(startUserSelectAssignees)) {            variables.put(BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_START_USER_SELECT_ASSIGNEES, startUserSelectAssignees);        }        ProcessInstance instance = runtimeService.createProcessInstanceBuilder()                .processDefinitionId(definition.getId())                .businessKey(businessKey)                .name(definition.getName().trim())                .variables(variables)                .start();        return instance.getId();    }    private void validateStartUserSelectAssignees(ProcessDefinition definition, Map<String, List<Long>> startUserSelectAssignees) {        // 1. 获得发起人自选审批人的 UserTask 列表        BpmnModel bpmnModel = processDefinitionService.getProcessDefinitionBpmnModel(definition.getId());        List<UserTask> userTaskList = BpmTaskCandidateStartUserSelectStrategy.getStartUserSelectUserTaskList(bpmnModel);        if (CollUtil.isEmpty(userTaskList)) {            return;        }        // 2. 校验发起人自选审批人的 UserTask 是否都配置了        userTaskList.forEach(userTask -> {            List<Long> assignees = startUserSelectAssignees != null ? startUserSelectAssignees.get(userTask.getId()) : null;            if (CollUtil.isEmpty(assignees)) {                throw exception(PROCESS_INSTANCE_START_USER_SELECT_ASSIGNEES_NOT_CONFIG, userTask.getName());            }            Map<Long, AdminUserRespDTO> userMap = adminUserApi.getUserMap(assignees);            assignees.forEach(assignee -> {                if (userMap.get(assignee) == null) {                    throw exception(PROCESS_INSTANCE_START_USER_SELECT_ASSIGNEES_NOT_EXISTS, userTask.getName(), assignee);                }            });        });    }    @Override    public void cancelProcessInstanceByStartUser(Long userId, @Valid BpmProcessInstanceCancelReqVO cancelReqVO) {        // 1.1 校验流程实例存在        ProcessInstance instance = getProcessInstance(cancelReqVO.getId());        if (instance == null) {            throw exception(PROCESS_INSTANCE_CANCEL_FAIL_NOT_EXISTS);        }        // 1.2 只能取消自己的        if (!Objects.equals(instance.getStartUserId(), String.valueOf(userId))) {            throw exception(PROCESS_INSTANCE_CANCEL_FAIL_NOT_SELF);        }        // 2. 取消流程        updateProcessInstanceCancel(cancelReqVO.getId(),                BpmReasonEnum.CANCEL_PROCESS_INSTANCE_BY_START_USER.format(cancelReqVO.getReason()));    }    @Override    public void cancelProcessInstanceByAdmin(Long userId, BpmProcessInstanceCancelReqVO cancelReqVO) {        // 1.1 校验流程实例存在        ProcessInstance instance = getProcessInstance(cancelReqVO.getId());        if (instance == null) {            throw exception(PROCESS_INSTANCE_CANCEL_FAIL_NOT_EXISTS);        }        // 2. 取消流程        AdminUserRespDTO user = adminUserApi.getUser(userId);        updateProcessInstanceCancel(cancelReqVO.getId(),                BpmReasonEnum.CANCEL_PROCESS_INSTANCE_BY_ADMIN.format(user.getNickname(), cancelReqVO.getReason()));    }    private void updateProcessInstanceCancel(String id, String reason) {        // 1. 更新流程实例 status        runtimeService.setVariable(id, BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS,                BpmProcessInstanceStatusEnum.CANCEL.getStatus());        runtimeService.setVariable(id, BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_REASON, reason);        // 2. 结束流程        taskService.moveTaskToEnd(id);    }    @Override    public void updateProcessInstanceReject(ProcessInstance processInstance, String reason) {        runtimeService.setVariable(processInstance.getProcessInstanceId(), BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS,                BpmProcessInstanceStatusEnum.REJECT.getStatus());        runtimeService.setVariable(processInstance.getProcessInstanceId(), BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_REASON,                BpmReasonEnum.REJECT_TASK.format(reason));    }    // ========== Event 事件相关方法 ==========    @Override    public void processProcessInstanceCompleted(ProcessInstance instance) {        // 注意：需要基于 instance 设置租户编号，避免 Flowable 内部异步时，丢失租户编号        FlowableUtils.execute(instance.getTenantId(), () -> {            // 1.1 获取当前状态            Integer status = (Integer) instance.getProcessVariables().get(BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS);            String reason = (String) instance.getProcessVariables().get(BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_REASON);            // 1.2 当流程状态还是审批状态中，说明审批通过了，则变更下它的状态            // 为什么这么处理？因为流程完成，并且完成了，说明审批通过了            if (Objects.equals(status, BpmProcessInstanceStatusEnum.RUNNING.getStatus())) {                status = BpmProcessInstanceStatusEnum.APPROVE.getStatus();                runtimeService.setVariable(instance.getId(), BpmnVariableConstants.PROCESS_INSTANCE_VARIABLE_STATUS, status);            }            // 2. 发送对应的消息通知            if (Objects.equals(status, BpmProcessInstanceStatusEnum.APPROVE.getStatus())) {                messageService.sendMessageWhenProcessInstanceApprove(INSTANCE.buildProcessInstanceApproveMessage(instance));            } else if (Objects.equals(status, BpmProcessInstanceStatusEnum.REJECT.getStatus())) {                messageService.sendMessageWhenProcessInstanceReject(                        INSTANCE.buildProcessInstanceRejectMessage(instance, reason));            }            // 3. 发送流程实例的状态事件            processInstanceEventPublisher.sendProcessInstanceResultEvent(                    INSTANCE.buildProcessInstanceStatusEvent(this, instance, status));        });    }}